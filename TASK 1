Code for Logic Gates

module AND(A,B,Y);
    input A;
    input B;
    output Y;

endmodule
	 
module OR(A,B,Y);
    input A;
    input B;
    output Y;

endmodule

module NAND(A,B,Y);
    input A;
    input B;
    output Y;	 

endmodule

module NOR(A,B,Y);
    input A;
    input B;
    output Y;

endmodule

module XOR(A,B,Y);
    input A;
    input B;
    output Y;

endmodule

module EXOR(A,B,Y);
    input A;
    input B;
    output Y;

endmodule
TEST BENCH for above gates
module and_gateTB_v;

	// Inputs
	reg A;
	reg B;

	// Outputs
	wire Y;

	// Instantiate the Unit Under Test (UUT)
	and_gate uut (
		.A(A), 
		.B(B), 
		.Y(Y)
	);

	initial begin
		// Initialize Inputs
		A = 0;
		B = 0;
		// Wait 100 ns for global reset to finish
		#100;
		
		A = 0;
		B = 1;
		// Wait 100 ns for global reset to finish
		#100;
		
		A = 1;
		B = 0;
		// Wait 100 ns for global reset to finish
		#100;
		
		A = 1;
		B = 1;
		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here

	end
      
endmodule

module NOT(A,Y);
    input A;
    output Y;

endmodule	 

module Not_GateTB_v;

	// Inputs
	reg A;

	// Outputs
	wire Y;

	// Instantiate the Unit Under Test (UUT)
	NOt_Gate uut (
		.A(A), 
		.Y(Y)
	);

	initial begin
		// Initialize Inputs
		A = 0;
		#100
		
		A = 1;
		#100;
		
        
		// Add stimulus here

	end
      
endmodule

